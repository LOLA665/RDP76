name: Paperspace Windows 11 RDP (auto-detect image)

on:
  workflow_dispatch:

jobs:
  create-rdp:
    runs-on: ubuntu-latest
    timeout-minutes: 390   # 6h30m buffer

    steps:
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl openssl

      - name: Generate random credentials
        id: gen
        run: |
          MACHINE_NAME="rdp-$(openssl rand -hex 4)"
          USERNAME="u$(openssl rand -hex 3)"
          PASSWORD="$(openssl rand -base64 15 | tr -dc 'A-Za-z0-9' | head -c12)"
          echo "MACHINE_NAME=$MACHINE_NAME" >> $GITHUB_OUTPUT
          echo "USERNAME=$USERNAME" >> $GITHUB_OUTPUT
          echo "PASSWORD=$PASSWORD" >> $GITHUB_OUTPUT

      - name: Detect Windows 11 image
        id: detect
        env:
          PAPERSPACE_API_KEY: ${{ secrets.PAPERSPACE_API_KEY }}
        run: |
          API_BASE="https://api.paperspace.io"
          echo "Fetching available templates..."
          RESPONSE=$(curl -s -X GET "$API_BASE/templates/getTemplates" \
            -H "X-Api-Key: $PAPERSPACE_API_KEY")
          echo "Templates: $RESPONSE" | head -c 2000

          IMAGE=$(echo "$RESPONSE" | jq -r '.[] | select(.name | test("Windows-11"; "i")) | .name' | head -n1)

          if [ -z "$IMAGE" ]; then
            echo "No Windows 11 image found! Defaulting to Windows-Server-2019"
            IMAGE="Windows-Server-2019"
          fi

          echo "Selected image: $IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT

      - name: Create Paperspace machine
        id: create
        env:
          PAPERSPACE_API_KEY: ${{ secrets.PAPERSPACE_API_KEY }}
          MACHINE_NAME: ${{ steps.gen.outputs.MACHINE_NAME }}
          USERNAME: ${{ steps.gen.outputs.USERNAME }}
          PASSWORD: ${{ steps.gen.outputs.PASSWORD }}
          IMAGE: ${{ steps.detect.outputs.IMAGE }}
        run: |
          API_BASE="https://api.paperspace.io"

          PAYLOAD=$(jq -n \
            --arg name "$MACHINE_NAME" \
            --arg region "NY2" \
            --arg machineType "RTX4000" \
            --arg image "$IMAGE" \
            --arg startupScript "powershell -ExecutionPolicy Bypass -Command \"net user $USERNAME $PASSWORD /add; net localgroup Administrators $USERNAME /add; Write-Host 'USER=$USERNAME PASSWORD=$PASSWORD'\"" \
            '{
              "machineName": $name,
              "region": $region,
              "machineType": $machineType,
              "image": $image,
              "billingType": "hourly",
              "script": $startupScript
            }')

          echo "Creating VM with image $IMAGE..."
          RESPONSE=$(curl -s -X POST "$API_BASE/machines/create" \
            -H "X-Api-Key: $PAPERSPACE_API_KEY" \
            -H "Content-Type: application/json" \
            --data "$PAYLOAD")

          echo "Create response: $RESPONSE"

          MACHINE_ID=$(echo "$RESPONSE" | jq -r '.id // .machineId // empty')
          PUBLIC_IP=$(echo "$RESPONSE" | jq -r '.publicIp // .ip // empty')

          echo "MACHINE_ID=$MACHINE_ID" >> $GITHUB_OUTPUT
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_OUTPUT

          echo "=== RDP LOGIN ==="
          echo "IP: $PUBLIC_IP"
          echo "USER: $USERNAME"
          echo "PASS: $PASSWORD"
          echo "================="

      - name: Wait 6 hours then shutdown
        if: steps.create.outputs.MACHINE_ID != ''
        env:
          PAPERSPACE_API_KEY: ${{ secrets.PAPERSPACE_API_KEY }}
        run: |
          MACHINE_ID=${{ steps.create.outputs.MACHINE_ID }}
          echo "VM $MACHINE_ID running for 6h..."
          sleep $((6 * 60 * 60))
          echo "Stopping VM..."
          curl -s -X POST "https://api.paperspace.io/machines/$MACHINE_ID/stop" \
            -H "X-Api-Key: $PAPERSPACE_API_KEY" || true
          echo "Stopped VM $MACHINE_ID"
          
